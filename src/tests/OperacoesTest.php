<?php

use Laravel\Lumen\Testing\DatabaseTransactions;

class OperacoesTest extends TestCase
{
    use DatabaseTransactions;

    private \Faker\Generator $faker;
    private array $dados = [];

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->faker = Faker\Factory::create('pt_BR');

        $this->dados = [
            "nome" => $this->faker->name,
            "cpf" => $this->faker->cpf(false),
            "data_nascimento" => $this->faker->date
        ];
    }

    public function testValidaContaIdInexistente()
    {
        $this->post('/api/deposito', [])
            ->seeStatusCode(204);
    }

    public function testOperacaoDeposito()
    {
        $usuario = $this->post('/api/usuarios', $this->dados);

        $contaUm = $this->post('/api/contas', [
            "usuarios_id" => $usuario->response->json('id'),
            "tipo_conta_id" => 2,
            "saldo" => 0
        ]);

        $contaUmId = $contaUm->response->json('id');

        $dados = [
            "contas_id" => $contaUmId,
            "valor" => 1000
        ];

        $responseData = [
            "contas_id" => $contaUmId,
            "conta_destino_id" => null,
            "tipo" => "DEPOSITO",
            "valor" => 1000
        ];

        $this->post('/api/deposito', $dados)
            ->seeStatusCode(200)
            ->seeJson()
            ->seeJsonContains($responseData)
            ->seeInDatabase('operacao', $responseData);
    }


    public function testOperacaoSaque()
    {
        $usuario = $this->post('/api/usuarios', $this->dados);

        $contaUm = $this->post('/api/contas', [
            "usuarios_id" => $usuario->response->json('id'),
            "tipo_conta_id" => 2,
            "saldo" => 0
        ]);

        $contaUmId = $contaUm->response->json('id');

        $dados = [
            "contas_id" => $contaUmId,
            "valor" => 1000
        ];

        $this->post('/api/deposito', $dados);

        $dadoSaque = [
            "contas_id" => $contaUmId,
            "valor" => 370
        ];

        $this->post('/api/saque', $dadoSaque)
            ->seeStatusCode(200)
            ->seeJson()
            ->seeJsonEquals([
                "100" => 3,
                "50" => 1,
                "20" => 1
            ])
            ->seeInDatabase('operacao', [
                "contas_id" => $contaUmId,
                "tipo" => "SAQUE",
                "valor" => 370
            ]);

        $this->get("/api/contas/{$contaUmId}")
            ->seeJsonContains([
                "saldo" => 630
            ]);
    }

    public function testOperacaoTransferencia()
    {
        $usuario = $this->post('/api/usuarios', $this->dados);

        $contaUm = $this->post('/api/contas', [
            "usuarios_id" => $usuario->response->json('id'),
            "tipo_conta_id" => 2,
            "saldo" => 0
        ]);

        $contaUmId = $contaUm->response->json('id');

        $dados = [
            "contas_id" => $contaUmId,
            "valor" => 1000
        ];

        $this->post('/api/deposito', $dados);

        $usuarioDois = $this->post('/api/usuarios', [
            "nome" => $this->faker->name,
            "cpf" => $this->faker->cpf(false),
            "data_nascimento" => $this->faker->date
        ]);

        $contaDois = $this->post('/api/contas', [
            "usuarios_id" => $usuarioDois->response->json('id'),
            "tipo_conta_id" => 2,
            "saldo" => 0
        ]);

        $contaDoisId = $contaDois->response->json('id');

        //Realizar Transferencia

        $dadosTransferencia = [
            "contas_id" => $contaUmId,
            "contas_destino_id" => $contaDoisId,
            "valor" => 400
        ];

        $this->post('/api/transferencia', $dadosTransferencia)
            ->seeStatusCode(200)
            ->seeJson()
            ->seeInDatabase('operacao', [
                "contas_id" => $contaUmId,
                "conta_destino_id" => $contaDoisId,
                "tipo" => "TRANSFERENCIA",
                "valor" => 400
            ]);

        $this->get("api/contas/{$contaUmId}")
            ->seeJsonContains([
               "saldo" => 600
            ]);

        $this->get("api/contas/{$contaDoisId}")
            ->seeJsonContains([
                "saldo" => 400
            ]);
    }

}
